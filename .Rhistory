# by all users of the dashboard
library(datasets)
library(shiny)
data(faithful)
# load data in 'global' chunk so it can be shared
# by all users of the dashboard
library(datasets)
library(shiny)
data(faithful)
force(faithful)
View(faithful)
selectInput(
"n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20
)
sliderInput(
"bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2
)
renderPlot({
erpt = faithful$eruptions
hist(
erpt, probability = TRUE, breaks = as.integer(input$n_breaks),
xlab = "Duration (minutes)", main = "Geyser Eruption Duration",
col = 'gray', border = 'white'
)
dens = density(erpt, adjust = input$bw_adjust)
lines(dens, col = "blue", lwd = 2)
})
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20)
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
sudo passwd shiny
install.packages("shinydashboard")
# load data in 'global' chunk so it can be shared
# by all users of the dashboard
library(datasets)
library(shiny)
data(faithful)
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20)
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
# load data in 'global' chunk so it can be shared
# by all users of the dashboard
library(datasets)
library(shiny)
data(faithful)
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20)
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
library(shiny)
runExample("01_hello")
~/shinyapp
|-- app.R
# Define UI for miles per gallon app ----
ui <- pageWithSidebar(
# App title ----
headerPanel("Miles Per Gallon"),
# Sidebar panel for inputs ----
sidebarPanel(),
# Main panel for displaying outputs ----
mainPanel()
)
runApp("~/shinyapp")
library(shiny)
# Define UI for miles per gallon app ----
ui <- pageWithSidebar(
# App title ----
headerPanel("Miles Per Gallon"),
# Sidebar panel for inputs ----
sidebarPanel(),
# Main panel for displaying outputs ----
mainPanel()
)
# Define server logic to plot various variables against mpg ----
server <- function(input, output) {
}
shinyApp(ui, server)
library(shiny)
# Define UI for miles per gallon app ----
ui <- pageWithSidebar(
# App title ----
headerPanel("Miles Per Gallon"),
# Sidebar panel for inputs ----
sidebarPanel(),
# Main panel for displaying outputs ----
mainPanel()
)
# Define server logic to plot various variables against mpg ----
server <- function(input, output) {
}
shinyApp(ui, server)
library(shiny)
# Define UI for miles per gallon app ----
ui <- pageWithSidebar(
# App title ----
headerPanel("Miles Per Gallon"),
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Selector for variable to plot against mpg ----
selectInput("variable", "Variable:",
c("Cylinders" = "cyl",
"Transmission" = "am",
"Gears" = "gear")),
# Input: Checkbox for whether outliers should be included ----
checkboxInput("outliers", "Show outliers", TRUE)
),
# Main panel for displaying outputs ----
mainPanel()
)
shinyApp(ui, server)
# Chunk 1
library(shiny)
# Define UI for miles per gallon app ----
ui <- pageWithSidebar(
# App title ----
headerPanel("Miles Per Gallon"),
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Selector for variable to plot against mpg ----
selectInput("variable", "Variable:",
c("Cylinders" = "cyl",
"Transmission" = "am",
"Gears" = "gear")),
# Input: Checkbox for whether outliers should be included ----
checkboxInput("outliers", "Show outliers", TRUE)
),
# Main panel for displaying outputs ----
mainPanel()
)
shinyApp(ui, server)
# Chunk 2
# Data pre-processing ----
# Tweak the "am" variable to have nicer factor labels -- since this
# doesn't rely on any user inputs, we can do this once at startup
# and then use the value throughout the lifetime of the app
mpgData <- mtcars
mpgData$am <- factor(mpgData$am, labels = c("Automatic", "Manual"))
# Define server logic to plot various variables against mpg ----
server <- function(input, output) {
# Compute the formula text ----
# This is in a reactive expression since it is shared by the
# output$caption and output$mpgPlot functions
formulaText <- reactive({
paste("mpg ~", input$variable)
})
# Return the formula text for printing as a caption ----
output$caption <- renderText({
formulaText()
})
# Generate a plot of the requested variable against mpg ----
# and only exclude outliers if requested
output$mpgPlot <- renderPlot({
boxplot(as.formula(formulaText()),
data = mpgData,
outline = input$outliers,
col = "#75AADB", pch = 19)
})
}
ui <- fluidPage(
# App title ----
titlePanel("Miles Per Gallon"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Selector for variable to plot against mpg ----
selectInput("variable", "Variable:",
c("Cylinders" = "cyl",
"Transmission" = "am",
"Gears" = "gear")),
# Input: Checkbox for whether outliers should be included ----
checkboxInput("outliers", "Show outliers", TRUE)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Formatted text for caption ----
h3(textOutput("caption")),
# Output: Plot of the requested variable against mpg ----
plotOutput("mpgPlot")
)
)
)
shinyApp(ui, server)
# Chunk 1
# Data pre-processing ----
# Tweak the "am" variable to have nicer factor labels -- since this
# doesn't rely on any user inputs, we can do this once at startup
# and then use the value throughout the lifetime of the app
mpgData <- mtcars
mpgData$am <- factor(mpgData$am, labels = c("Automatic", "Manual"))
# Define server logic to plot various variables against mpg ----
server <- function(input, output) {
# Compute the formula text ----
# This is in a reactive expression since it is shared by the
# output$caption and output$mpgPlot functions
formulaText <- reactive({
paste("mpg ~", input$variable)
})
# Return the formula text for printing as a caption ----
output$caption <- renderText({
formulaText()
})
# Generate a plot of the requested variable against mpg ----
# and only exclude outliers if requested
output$mpgPlot <- renderPlot({
boxplot(as.formula(formulaText()),
data = mpgData,
outline = input$outliers,
col = "#75AADB", pch = 19)
})
}
# Chunk 2
ui <- fluidPage(
# App title ----
titlePanel("Miles Per Gallon"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Selector for variable to plot against mpg ----
selectInput("variable", "Variable:",
c("Cylinders" = "cyl",
"Transmission" = "am",
"Gears" = "gear")),
# Input: Checkbox for whether outliers should be included ----
checkboxInput("outliers", "Show outliers", TRUE)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Formatted text for caption ----
h3(textOutput("caption")),
# Output: Plot of the requested variable against mpg ----
plotOutput("mpgPlot")
)
)
)
# Chunk 1
# Data pre-processing ----
# Tweak the "am" variable to have nicer factor labels -- since this
# doesn't rely on any user inputs, we can do this once at startup
# and then use the value throughout the lifetime of the app
mpgData <- mtcars
mpgData$am <- factor(mpgData$am, labels = c("Automatic", "Manual"))
# Define server logic to plot various variables against mpg ----
server <- function(input, output) {
# Compute the formula text ----
# This is in a reactive expression since it is shared by the
# output$caption and output$mpgPlot functions
formulaText <- reactive({
paste("mpg ~", input$variable)
})
# Return the formula text for printing as a caption ----
output$caption <- renderText({
formulaText()
})
# Generate a plot of the requested variable against mpg ----
# and only exclude outliers if requested
output$mpgPlot <- renderPlot({
boxplot(as.formula(formulaText()),
data = mpgData,
outline = input$outliers,
col = "#75AADB", pch = 19)
})
}
# Chunk 2
ui <- fluidPage(
# App title ----
titlePanel("Miles Per Gallon"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Selector for variable to plot against mpg ----
selectInput("variable", "Variable:",
c("Cylinders" = "cyl",
"Transmission" = "am",
"Gears" = "gear")),
# Input: Checkbox for whether outliers should be included ----
checkboxInput("outliers", "Show outliers", TRUE)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Formatted text for caption ----
h3(textOutput("caption")),
# Output: Plot of the requested variable against mpg ----
plotOutput("mpgPlot")
)
)
)
shinyApp(ui, server)
install.packages(c('tinytex', 'rmarkdown'))
tinytex::install_tinytex(force = T)
install.packages(c("tinytex", "rmarkdown"))
PATH=/usr/local/texlive/2019/bin/x86_64-linux:$PATH
PATH=C:/texlive/2019/bin/x86_64-linux:$PATH
PATH=C:\texlive/2019/bin/x86_64-linux:$PATH
PATH="C:/texlive/2019/bin/x86_64-linux:$PATH"
tinytex::tlmgr_update()
yaml::yaml.load(
'output:
pdf_document:
latex_engine: xelatex
mainfont: roboto')
library(readxl)
Table_10_21 <- read_excel("C:/Users/david/Downloads/Table_10.21.xls")
View(Table_10_21)
plot(Table_10_21[,2])
plot(Table_10_21[2,])
df <- cbind(Table_10_21$X__1, Table_10_21$`Metal-working industry`)
View(df)
colnames(df, c("data", "valore")
)
colnames(df, c("data", "valore"))
colnames(df, "data", "valore"))
colnames(df, "data", "valore")
colnames(df, c(data, valore))
names <- c("data", "valore")
colnames(df, names)
colnames(df) <- c("data", "value")
View(df)
df <- as.data.frame(df)
plot(df$data, df$value)
source('~/GitHub/Inequality/R/Graph.R', echo=TRUE)
source('~/GitHub/Inequality/R/Graph.R', echo=TRUE)
source('~/GitHub/Inequality/R/Graph.R', echo=TRUE)
rfam <- read.csv("Data/rfam.csv", na.strings=c("", "NA"))
source('~/GitHub/Inequality/R/graph.R', echo=TRUE)
source('~/GitHub/Inequality/R/graph.R', echo=TRUE)
wd()
wd()
setwd()
setwd(.)
source('~/GitHub/Macro-PS1/Ex_6_5.R', echo=TRUE)
source('~/GitHub/Macro-PS1/Ex_6_5.R', echo=TRUE)
source('~/GitHub/Macro-PS1/Ex_6_5.R', echo=TRUE)
View(dt)
View(df)
source('~/GitHub/Macro-PS1/Ex_6_5.R', echo=TRUE)
source('~/GitHub/Macro-PS1/Ex_6_5.R', echo=TRUE)
source('~/GitHub/Macro-PS1/Ex_6_5.R', echo=TRUE)
source('~/GitHub/Macro-PS1/Ex_6_5.R', echo=TRUE)
source('~/GitHub/Macro-PS1/Ex_6_5.R', echo=TRUE)
source('~/GitHub/Macro-PS1/Ex_6_5.R', echo=TRUE)
source('~/GitHub/Macro-PS1/Ex_6_5.R', echo=TRUE)
source('~/GitHub/Macro-PS1/Ex_6_5.R', echo=TRUE)
source('~/GitHub/Macro-PS1/Ex_6_5.R', echo=TRUE)
source('~/GitHub/Macro-PS1/Ex_6_5.R', echo=TRUE)
source('~/GitHub/Macro-PS1/Ex_6_5.R', echo=TRUE)
source('~/GitHub/Macro-PS1/Ex_6_5.R', echo=TRUE)
source('~/GitHub/Macro-PS1/Ex_6_5.R', echo=TRUE)
source('~/GitHub/Macro-PS1/Ex_6_5.R', echo=TRUE)
source('~/GitHub/Macro-PS1/Ex_6_5.R', echo=TRUE)
source('~/GitHub/Macro-PS1/Ex_6_5.R', echo=TRUE)
source('~/GitHub/Macro-PS1/Ex_6_5.R', echo=TRUE)
source('~/GitHub/Macro-PS1/Ex_6_5.R', echo=TRUE)
source('~/GitHub/Macro-PS1/Ex_6_5.R', echo=TRUE)
source('~/GitHub/Macro-PS1/Ex_6_5.R', echo=TRUE)
source('~/GitHub/Macro-PS1/Ex_6_5.R', echo=TRUE)
source('~/GitHub/Macro-PS1/Ex_6_5.R', echo=TRUE)
source('~/GitHub/Macro-PS1/Ex_6_5.R', echo=TRUE)
source('~/GitHub/Macro-PS1/Ex_6_5.R', echo=TRUE)
source('~/GitHub/Macro-PS1/Ex_6_5.R', echo=TRUE)
source('~/GitHub/Macro-PS1/Ex_6_5.R', echo=TRUE)
source('~/GitHub/Macro-PS1/Ex_6_5.R', echo=TRUE)
source('~/GitHub/Macro-PS1/Ex_6_5.R', echo=TRUE)
source('~/GitHub/Macro-PS1/Ex_6_5.R', echo=TRUE)
source('~/GitHub/Macro-PS1/Ex_6_5.R', echo=TRUE)
source('~/GitHub/Macro-PS1/Ex_6_5.R', echo=TRUE)
source('~/GitHub/Macro-PS1/Ex_6_5.R', echo=TRUE)
source('~/GitHub/Macro-PS1/Ex_6_5.R', echo=TRUE)
source('~/GitHub/Macro-PS1/Ex_6_5.R', echo=TRUE)
source('~/GitHub/Macro-PS1/Ex_6_5.R', echo=TRUE)
source('~/GitHub/Macro-PS1/Ex_6_5.R', echo=TRUE)
source('~/GitHub/Macro-PS1/Ex_6_5.R', echo=TRUE)
help(read.csv)
source('C:/Users/david/Google Drive/Projects/R/Econometrics PS2/Q3.R', echo=TRUE)
source('C:/Users/david/Google Drive/Projects/R/Econometrics PS2/Q3.R', echo=TRUE)
getwd()
setwd(getSrcDirectory()[1])
utils::getSrcDirectory
source('C:/Users/david/Google Drive/Projects/R/Econometrics PS2/Q3.R', echo=TRUE)
source('C:/Users/david/Google Drive/Projects/R/Econometrics PS2/Q3.R', echo=TRUE)
getwd()
source('C:/Users/david/Google Drive/Projects/R/Econometrics PS2/Q3.R', echo=TRUE)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
rstudioapi::getActiveDocumentContext
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd("C:/Users/david/Google Drive/Projects/R/Econometrics PS2")
source('C:/Users/david/Google Drive/Projects/R/Econometrics PS2/Q3.R', echo=TRUE)
source('C:/Users/david/Google Drive/Projects/R/Econometrics PS2/Q3.R', echo=TRUE)
source('C:/Users/david/Google Drive/Projects/R/Econometrics PS2/Q3.R', echo=TRUE)
getwd()
source('C:/Users/david/Google Drive/Projects/R/Econometrics PS2/Q3.R', echo=TRUE)
source('C:/Users/david/Google Drive/Projects/R/Econometrics PS2/Q3.R', echo=TRUE)
source('C:/Users/david/Google Drive/Projects/R/Econometrics PS2/Q3.R', echo=TRUE)
getwd()
source('C:/Users/david/Google Drive/Projects/R/Econometrics PS2/Q3.R', echo=TRUE)
source('~/GitHub/econometrics-phd/AEC1_1_PS_2.R', echo=TRUE)
install.packages("MonteCarlo")
source('~/GitHub/econometrics-phd/AEC1_1_PS_2.R', echo=TRUE)
View(first_iv)
View(first_iv)
View(reduced_form)
View(ols_y_d)
View(ols_y_d)
View(reduced_form)
View(simulate_iv)
d_hat
################################################################
### Advanced Econometrics 1 â PhD Course
### Winter Term 2019
### Problem Set 2
################################################################
################################################################
# Question 1 â Homogeneous IV Setup
################################################################
# see slides chapter 3 for notation
# 0. Data Generating Process
set.seed(123)
v <- rnorm(200)
e <- rnorm(200)
z <- rnorm(200)
d <- 0.25 * z + v
u <- 0.5 * v + e   # create error term which is highly correlated to regressor (model endogeneity problem)
y <- 2 * d + u
# 1. Derive OLS estimator from regression of y on d w/o constant
ols_y_d <- lm(y ~ 0 + d)
summary(ols_y_d)
beta_hat <- coefficients(ols_y_d)["d"] # biased estimator for influence of d on y (d correlated to error term u)
# 2. Derive the IV-estimator where d is instrumented by z
cor(y, z) # check relevance condition
cor(d, z)
cor(d, u) # check if error term is correlated to regressor (if yes, we have an endogeneity problem)
cor(z, u) # check if instrument z is exogenous
first_iv <- lm(d ~ z)
d_hat <- fitted.values(first_iv)
pi_hat <- as.numeric(coefficients(first_iv)["z"])
reduced_form <- lm(y ~ d_hat)
phi_hat_1 <- as.numeric(coefficients(reduced_form)["d_hat"]) # unbiased estimator for influence of d on y through usage of instrument z
print("true beta = 2.000")
paste("biased beta hat = ", beta_hat)
paste("unbiased beta_hat_iv = : " ,phi_hat_1)
summary(ols_y_d)
source('C:/Users/david/Google Drive/Projects/R/Econometrics PS2/Q3.R', echo=TRUE)
df read.csv(file="/PS2_card.csv")
source('C:/Users/david/Google Drive/Projects/R/Econometrics PS2/Q3.R', echo=TRUE)
getwd()
source('C:/Users/david/Google Drive/Projects/R/Econometrics PS2/Q3.R', echo=TRUE)
View(df)
str(card)
str(df)
str(card)
summary(df)
source('C:/Users/david/Google Drive/Projects/R/Econometrics PS2/Q3.R', echo=TRUE)
source('C:/Users/david/Google Drive/Projects/R/Econometrics PS2/Q3.R', echo=TRUE)
source('~/GitHub/econometrics-phd/AEC1_1_PS_2.R', echo=TRUE)
source('C:/Users/david/Google Drive/Projects/R/Econometrics PS2/Q3.R', echo=TRUE)
source('C:/Users/david/Google Drive/Projects/R/Econometrics PS2/Q3.R', echo=TRUE)
View(OLS_1)
source('C:/Users/david/Google Drive/Projects/R/Econometrics PS2/Q3.R', echo=TRUE)
data('card')
source('C:/Users/david/Google Drive/Projects/R/Econometrics PS2/Q3.R', echo=TRUE)
source('C:/Users/david/Google Drive/Projects/R/Econometrics PS2/Q3.R', echo=TRUE)
source('C:/Users/david/Google Drive/Projects/R/Econometrics PS2/Q3.R', echo=TRUE)
source('C:/Users/david/Google Drive/Projects/R/Econometrics PS2/Q3.R', echo=TRUE)
source('C:/Users/david/Google Drive/Projects/R/Econometrics PS2/Q3.R', echo=TRUE)
source('C:/Users/david/Google Drive/Projects/R/Econometrics PS2/Q3.R', echo=TRUE)
source('C:/Users/david/Google Drive/Projects/R/Econometrics PS2/Q3.R', echo=TRUE)
source('C:/Users/david/Google Drive/Projects/R/Econometrics PS2/Q3.R', echo=TRUE)
source('C:/Users/david/Google Drive/Projects/R/Econometrics PS2/Q3.R', echo=TRUE)
source('C:/Users/david/Google Drive/Projects/R/Econometrics PS2/Q3.R', echo=TRUE)
SLS_1 <- lm(educ ~ nearc4 + exper + black + south + smsa + reg661 + reg662 + reg663 + reg664 + reg665 + reg666 + reg667 + reg668, data = card)
summary(SLS_1)
source('C:/Users/david/Google Drive/Projects/R/Econometrics PS2/Q3.R', echo=TRUE)
source('C:/Users/david/Google Drive/Projects/R/Econometrics PS2/Q3.R', echo=TRUE)
summary(SLS_1)
cor(df$educ, df$nearc4)
source('C:/Users/david/Google Drive/Projects/R/Econometrics PS2/Q3.R', echo=TRUE)
cor.test(df$educ, df$nearc4, method = "pearson")
educ_hat <- fitted.values(SLS_1)
source('C:/Users/david/Google Drive/Projects/R/Econometrics PS2/Q3.R', echo=TRUE)
View(df)
SLS_2 <- lm(data = df, lwage ~ educ_hat + exper + black + south + smsa + reg661 + reg662 + reg663 + reg664 + reg665 + reg666 + reg667 + reg668 + smsa66)
summary(OLS_1)
source('C:/Users/david/Google Drive/Projects/R/Econometrics PS2/Q3.R', echo=TRUE)
source('C:/Users/david/Google Drive/Projects/R/Econometrics PS2/Q3.R', echo=TRUE)
source('C:/Users/david/Google Drive/Projects/R/Econometrics PS2/Q3.R', echo=TRUE)
source('C:/Users/david/Google Drive/Projects/R/Econometrics PS2/Q3.R', echo=TRUE)
source('C:/Users/david/Google Drive/Projects/R/Econometrics PS2/Q3.R', echo=TRUE)
source('C:/Users/david/Google Drive/Projects/R/Econometrics PS2/Q3.R', echo=TRUE)
source('C:/Users/david/Google Drive/Projects/R/Econometrics PS2/Q3.R', echo=TRUE)
source('C:/Users/david/Google Drive/Projects/R/Econometrics PS2/Q3.R', echo=TRUE)
source('C:/Users/david/Google Drive/Projects/R/Econometrics PS2/Q3.R', echo=TRUE)
source('C:/Users/david/Google Drive/Projects/R/Econometrics PS2/Q3.R', echo=TRUE)
source('C:/Users/david/Google Drive/Projects/R/Econometrics PS2/Q3.R', echo=TRUE)
source('C:/Users/david/Google Drive/Projects/R/Econometrics PS2/Q3.R', echo=TRUE)
source('C:/Users/david/Google Drive/Projects/R/Econometrics PS2/Q3.R', echo=TRUE)
source('C:/Users/david/Google Drive/Projects/R/Econometrics PS2/Q3.R', echo=TRUE)
source('~/GitHub/econometrics-phd/AEC1_1_PS_2.R', echo=TRUE)
source('~/GitHub/econometrics-phd/AEC1_1_PS_2.R', echo=TRUE)
par(mar=c(1,1,1,1))
source('~/GitHub/econometrics-phd/AEC1_1_PS_2.R', echo=TRUE)
setwd("~/GitHub/econometrics-phd")
source('~/GitHub/econometrics-phd/AEC1_1_PS_2.R', echo=TRUE)
source('~/GitHub/econometrics-phd/AEC1_1_PS_2.R', echo=TRUE)
source('~/GitHub/econometrics-phd/AEC1_1_PS_2.R', echo=TRUE)
source('~/GitHub/econometrics-phd/AEC1_1_PS_2.R', echo=TRUE)
source('~/GitHub/econometrics-phd/AEC1_1_PS_2.R', echo=TRUE)
